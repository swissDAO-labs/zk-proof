{"noir_version":"0.25.0+3f676051a6073d6eabdc7fee68e4b522334344f6","hash":4402263707432458645,"abi":{"parameters":[{"name":"prompt_bytes","type":{"kind":"array","length":256,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}],"param_witnesses":{"hash":[{"start":256,"end":288}],"prompt_bytes":[{"start":0,"end":256}]},"return_type":null,"return_witnesses":[]},"bytecode":"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","debug_symbols":"ldUxCoNAEEbhu0xt4eyuuu5VQoqNMSCIim4CQbx7lGAT0rzyZ/iqV8wq/djE1I3DImEV472EyyrLFIdjLynOSYLxmkk73CXYXLdMHl3fSnDVds12Uv8jVt1JrPsldc6JcmI4sZw4TgpOSk4qTjwnuL7Nc06UE8OJ5cRxUnBSclJx4jnh9ZXXV15feX3l9ZXXV15feX3l9ZXXV17fwPr7eMW5i7e+PR7UcXsOzfmv9pne0/eyfQA=","file_map":{"47":{"source":"use dep::std::hash::sha256;\n\n// This circuit proves that the user knows the input of the provided hash of the prompt\n// In the contract, if we would like to tie the \nfn main(prompt_bytes: [u8; 256], hash: pub [u8; 32]) {\n    // Generate sha256 hash of input\n    let compare_hash = sha256(prompt_bytes);\n    assert(hash == compare_hash);\n}\n\n#[test]\nfn test_main() {\n    let prompt_str = \"Renaissance-style portrait of an astronaut in space, detailed starry background, reflective helmet.\";\n    let mut prompt_bytes = prompt_str.as_bytes();\n\n    let mut padded_input: [u8; 256] = [0; 256];\n\n    for i in 0..prompt_bytes.len() {\n        padded_input[i] = prompt_bytes[i];\n    }\n\n    let prompt_hash: [u8; 32] = sha256(padded_input);\n    println(padded_input);\n    println(prompt_hash);\n\n    main(padded_input, prompt_hash);\n}\n","path":"/Users/davidal/swiss-dao/scarif/src/main.nr"}}}